<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fabrício Godoy</title>
    <description>Desenvolvedor C#, Java, Javascript e Go que procura sempre acompanhar o mercado que está em constante mutação.
</description>
    <link>http://www.fgodoy.me/</link>
    <atom:link href="http://www.fgodoy.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Jun 2016 22:16:27 +0000</pubDate>
    <lastBuildDate>Thu, 30 Jun 2016 22:16:27 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Hello World com Autotools</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Para quem não conhece o Autotools, as ferramentas do mesmo têm o principal&lt;br&gt;
objetivo de fazer programas portáveis, possibilitando assim que o programa possa&lt;br&gt;
ser compilado em qualquer ambiente.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vou explicar como fazer um programa que exibe “Hello World!” no console&lt;br&gt;
configurado com Autotools. Não vou me ater a detalhes, ficando a cargo do leitor&lt;br&gt;
pesquisar detalhadamente sobre as ferramentas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Para continuar você precisará ter instalado as seguintes ferramentas: make,&lt;br&gt;
gcc-c++, autoconf e automake. Para Windows você precisará também do MinGW e do&lt;br&gt;
MSYS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vamos ao projeto:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Primeiramente crie uma pasta para o projeto (&lt;code&gt;hello-world&lt;/code&gt; por exemplo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agora crie a pasta src (o nome é sua escolha), ela irá conter o código fonte&lt;br&gt;
do projeto.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crie o arquivo &lt;code&gt;main.cpp&lt;/code&gt; dentro da pasta &lt;code&gt;src&lt;/code&gt;, como o código abaixo.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;main.cpp&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color: #BC7A00&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;cout &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;endl;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dentro da pasta raíz do projeto crie o arquivo &lt;code&gt;Makefile.am&lt;/code&gt;, com o conteúdo&lt;br&gt;
abaixo.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Makefile.am&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;SUBDIRS = src&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Os arquivos &lt;code&gt;Makefile.am&lt;/code&gt; têm instruções de compilação, mais especificamente,&lt;br&gt;
instruções para o comando &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No caso deste arquivo, ele indica que deve ser pesquisado o diretório src.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agora crie outro arquivo &lt;code&gt;Makefile.am&lt;/code&gt; no diretório &lt;code&gt;src&lt;/code&gt;, com o seguinte&lt;br&gt;
conteúdo:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Makefile.am&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bin_PROGRAMS = hello-world

hello_world_SOURCES = main.cpp&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A primeira linha indica quais são os nomes dos programa executáveis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A segunda linha indica quais são os arquivos fontes do programa hello-world.&lt;br&gt;
Observe que todos os caracteres não alfabéticos devem der substituídos por &quot;_&quot;,&lt;br&gt;
como em &lt;code&gt;hello_world&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agora precisamos criar o arquivo &lt;code&gt;configure.ac&lt;/code&gt; (no diretório raíz do&lt;br&gt;
projeto, daqui em diante iremos trabalhar apenas no diretório raíz), que irá&lt;br&gt;
conter as configurações do projeto, como nome, versão e dependências do projeto&lt;br&gt;
entre outros.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Para criar um arquivo &lt;code&gt;configure.ac&lt;/code&gt; preliminar execute o comando abaixo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;autoscan&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serão criados os arquivos &lt;code&gt;configure.scan&lt;/code&gt; e &lt;code&gt;configure.log&lt;/code&gt;, sendo que o&lt;br&gt;
configure.scan é o configure.ac preliminar e o configure.log contém os erros&lt;br&gt;
encontrados.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Renomeie o arquivo &lt;code&gt;configure.scan&lt;/code&gt; para &lt;code&gt;configure.ac&lt;/code&gt;. O arquivo&lt;br&gt;
&lt;code&gt;configure.log&lt;/code&gt; pode ser excluído.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifique o arquivo configure.ac como abaixo.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;configure.ac&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.54])
AC_INIT([Hello World], [0.1.0], [myemail@server.com], [hello-world])
AC_CONFIG_SRCDIR([src])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([1.9 -Wall -Werror])

# Checks for programs.
AC_PROG_CXX

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_CONFIG_FILES([Makefile
src/Makefile])
AC_OUTPUT&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_PREREQ&lt;/strong&gt;: A versão mínima necessária do autoconf, geralmente é a versão 2.54.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_INIT&lt;/strong&gt;: Define o nome e versão do projeto, endereço para relatar erros e o&lt;br&gt;
nome do pacote do projeto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_CONFIG_SRCDIR&lt;/strong&gt;: Define a pasta que contém o código fonte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_CONFIG_HEADERS&lt;/strong&gt;: Define o nome do arquivo de definições do projeto, é&lt;br&gt;
recomendável deixar o padrão.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AM_INIT_AUTOMAKE&lt;/strong&gt;: É necessário para fazer uso dos &lt;code&gt;Makefile.am&lt;/code&gt;. Define a&lt;br&gt;
versão mínima do &lt;code&gt;automake&lt;/code&gt; e as opções &lt;code&gt;-Wall&lt;/code&gt; e &lt;code&gt;-Werror&lt;/code&gt; definem&lt;br&gt;
respectivamente que devem ser mostrados todos os alertas e que todos os alertas&lt;br&gt;
devem ser tratados como erros.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_PROG_CXX&lt;/strong&gt;: Verifica e exige o compilador C++ para o projeto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_CONFIG_FILES&lt;/strong&gt;: Define os locais dos arquivo &lt;code&gt;Makefile&lt;/code&gt; do projeto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AC_OUTPUT&lt;/strong&gt;: Macro que executa a saída do &lt;code&gt;autoconf&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;É necessário executar os comandos &lt;code&gt;aclocal&lt;/code&gt;, &lt;code&gt;autoconf&lt;/code&gt;, &lt;code&gt;autoheader&lt;/code&gt; e&lt;br&gt;
&lt;code&gt;automake&lt;/code&gt; para gerar o script de configuração do projeto, mas para facilitar há&lt;br&gt;
o comando &lt;code&gt;autoreconf&lt;/code&gt; que executa todos os comandos necessários.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inicialmente iremos executar o comando abaixo para que os arquivos iniciais&lt;br&gt;
necessários sejam criados.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;autoreconf --install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serão criados vários arquivos, sendo que o arquivo &lt;code&gt;INSTALL&lt;/code&gt; contém instruções&lt;br&gt;
de instalação e configuração e o arquivo &lt;code&gt;COPYING&lt;/code&gt; contém a licença do programa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;O automake exige os arquivos &lt;code&gt;NEWS&lt;/code&gt;, &lt;code&gt;README&lt;/code&gt;, &lt;code&gt;AUTHORS&lt;/code&gt; e &lt;code&gt;ChangeLog&lt;/code&gt;.&lt;br&gt;
Inicialmente crie-os vazios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;touch NEWS README AUTHORS ChangeLog&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute o comando &lt;code&gt;autoreconf&lt;/code&gt; e será gerado o script de configuração do&lt;br&gt;
projeto novamente, agora sem erros com o  automake.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute o script &lt;code&gt;./configure&lt;/code&gt; para configurar o projeto.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute o comando &lt;code&gt;make&lt;/code&gt; para compilar o projeto.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teste o executável do projeto:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;src/hello-world&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Para criar um pacote do projeto execute o seguinte comando:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;make dist&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;E será criado um pacote distribuível para outros que queiram compilar o projeto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Para que além de ser criado o pacote o mesmo seja testado, execute o seguinte&lt;br&gt;
comando:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$ &lt;/span&gt;make distcheck&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pronto, é isso.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aqui só é mostrado o básico necessário para começar a usar o Autotools, as&lt;br&gt;
possibilidades vão muito além destas explicadas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;O pacote final pode ser acessado neste link:&lt;br&gt;
&lt;a href=&quot;http://dl.getdropbox.com/u/1671797/Blog/hello-world-0.1.0.tar.gz&quot; class=&quot;bare&quot;&gt;http://dl.getdropbox.com/u/1671797/Blog/hello-world-0.1.0.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manual do autoconf: &lt;a href=&quot;http://www.gnu.org/software/autoconf/manual/index.html&quot; class=&quot;bare&quot;&gt;http://www.gnu.org/software/autoconf/manual/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manual do automake: &lt;a href=&quot;http://www.gnu.org/software/automake/manual/index.html&quot; class=&quot;bare&quot;&gt;http://www.gnu.org/software/automake/manual/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 23 May 2009 00:00:00 +0000</pubDate>
        <link>http://www.fgodoy.me/2009/05/hello-world-com-autotools/</link>
        <guid isPermaLink="true">http://www.fgodoy.me/2009/05/hello-world-com-autotools/</guid>
        
        
      </item>
    
  </channel>
</rss>
